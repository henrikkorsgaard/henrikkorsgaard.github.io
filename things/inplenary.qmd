---
title: "InPlenary: Co-located Interactive Lectures"
bibliography:
 - ../references/hci.bib
csl: ../references/apa.csl
---

::: {#fig-screenshots layout-ncol=3}

![](/public/images/inplenary/inplenary-lecture.png){#fig-1}

![](/public/images/inplenary/inplenary-interaction.png){#fig-2}

![](/public/images/inplenary/inplenary-discussion.png){#fig-3}

Pictures from InPlenary lecture. (a) Me lecturing, (b) Screen with delegated navigation and interaction, (c) Screen with discussion slide and comment field.
:::

In my PhD I explored various ways to design for places and co-located interaction. One of the systems we developed was a co-located lecturing system that distributed the lecture slides and interaction widgets to client devices using the local network access point as a signer for location-based content. The core idea was to make the traditional university lecture an interactive object that could facilitate richer interactions between the participants in the lecture. We worked from the following scenario:

_"A lecturer enters the classroom and open their computer. They sign into the InPlenary application and navigate to today's lecture slides. When activated, the projector in the room automatically^[yes, UbiComp!] shows the lecture. The lecturer can see a small view of their slides on their screen, their notes and a preview of the next slide. [...] The students open their computers and login to InPlenary. They can see a preview of the current lecture in the room (which is also on the projector) and open it. When opened they can see a small view with the current slide and a note-taking widget where they can make notes. As the lecturer navigates through the slides, they also change on the student's computers."_

To support the above scenario (and the idea of interactive widgets), we developed a slide authoring module that would ingest a pdf slideshow and transform it to an interactive lecture. In the authoring tool, the lecturer could add notes and interactive widgets to each slide. We also developed a system for coupling the lecturer and student computers to a specific room, and a module for running and distributing the slides to the client machines. 

### Interactive widgets
We developed a series of interactive widgets that could be added as an overlay to the relevant slides. We selected a couple from the research literature on Audience Response Systems: Voting, commenting and essay feedback. We added two additional widgets: _Navigation delegation_ and _learning progression feedback_. See the scenarios below.

#### Quiz voting
_"The lecturer change to a slide with a quiz question: Who was the proposer of the concept of Ubiqiotus computing? On the student views a voting widget is introduced with options. As they enter their vote they get a confirmation. Their vote is persisted with their notes for later review, together with the correct answer. When the lecturer ends the vote, the results are overlayed on top of the current slide. They initiate a discussion of the result."_

#### Comments and voting
_"The lecturer change to a slide with an open question. They invite the students to discuss the question with the student next to them. When they have discussed the question, they enter a reply into the comment widget. Once they have added a comment, they can vote on the replies from the other students. The lecturer shows the 3 top voted replies and they discuss these."_

#### Navigation delegation
_"The lecturer change to a slide that ask the students to review the last 5 slides with software engineering models. They are tasked discussiing the models on how each model deal with iteration. To support the students in group discussions, the lecturer delegates control of the five slides to the students, so they can navigate back and forth between the models and the guiding questions. When the exercise is over, the lecturer retake control and navigates to a slide where the students can reorganize a list with the models from least to most agile. The students complete the exercise and the class review the final list."_

### Supporting lectures and later review 
We examined statistics on slide access in our existing learning management system. We observed two things: Students download slides _at_ the lecture and we saw a huge spike in downloads when they used the slides as supplementary material _when studying for the exam_. To support this use-scenario we implemented a way to persist the student notes and lecture response data with the slides and a review module where the students could review and reflect on the material when studying for the exam.

_"Four months after the exam a student is studying for their exam. They login to the InPlenary system and navigate to the lecture above. They can navigate through the slides, review and edit their notes, and replay the exercises. They can also review the comments, replies and input produced collectively in the class to aid their understanding of the concepts."_

## Background: Designing for place and common interactive objects
The system explored several of the questions in my PhD thesis, in particular _how to design interactive systems and applications for places?_ The short idea was to explore how we can design systems for particular places^[**Places**, not location-based stuff. Places are meaningful to the people who inhabit these and use them for multiple activities. "Location" does not capture that. Think _place_ as a user experience construct and location as a minor usability construct. There is a longer version of this argument in my thesis.] that serve multiple functions and multiple user demographies (e.g. libraries, community centres, educational institutions, urban spaces). InPlenary combines ideals from _ubiquitous computing_ and ideas about _common information spaces_ from CSCW. 

When designing for a place, we need to consider two requirements. First, the inhabitants (the students) bring their own devices into the space. We need to support multiple different devices and cross-device interaction. To address this we decided to implement the system as a web-application. Second, we need a way to establish location. In this case we utalized the existing network infrastructure to establish a connection between the devices and the room. 

In the system, each classroom access point (AP) is assigned an unique key that is exposed through a small webserver running on the AP. When participants use the network, background services can query the AP for the key and send that along to the lecture system backend. This would match the user with a classroom, and when the lecture starts, a collection of slides (see figure @fig-sequence).

Clients would listen to slide changes and update the slides on each client device. With a personalized loging, students can write notes for each slide, answer interactive quizzes and provide feedback for classroom assignments etc. These would be persisted with the slides, so that the information is available when students review the lecture material later.

## Implementation
The system is implemented across multiple modules. Each was developed as a rather thick client^[For production, I would make a thin client instead and delegate more to the backend. However, when prototyping one often end up with a thick client.], with the location service and persistance happening on a web-server. 


```{mermaid}
%%| label: fig-sequence
%%| fig-cap: Sequence diagram coupling clients to a room via an access point

sequenceDiagram
  actor Student
  participant AP
  participant Server
  actor Lecturer

  Student->>Server: Student login
  activate Server
  Server-->>Student: Student page with lectures
  deactivate Server
  Student->>AP: get roomID
  activate AP
  AP-->>Student: return roomID
  deactivate AP
  Student->>Server: enter lecture room 
  activate Server
  Server-->>Student: Lecture Room
  deactivate Server
  
  activate Server
  Lecturer ->> Server: Start lecture
  loop every n seconds
  Lecturer ->> Server: Change slide
  Student->>Server: Query current slide
  Server-->Student: return new slide
  end
  Lecturer ->> Server: Stop lecture
  deactivate Server
```

```{dot}
//| label: fig-container
//| fig-cap: C4 Container view of InPlenary (A bit chaotic -- needs cleaning).

digraph {
  compound=true
  graph [fontname="Arial", rankdir=TB, ranksep=1.0, nodesep=1.0]
  node [fontname="Arial", shape=box, margin="0.4,0.3"]
  edge [fontname="Arial"]

  { rank=same 1 2}
  { rank=same 4 5 6}
  { rank=same 7 8 10}
  { ranbk=same 9}

  1 [id=1,shape=rect, label=<<font point-size="34">Lecturer user</font><br /><font point-size="19">[Person]</font>>, style=filled, color="#052e56", fillcolor="#08427b", fontcolor="#ffffff"]
  2 [id=2,shape=rect, label=<<font point-size="34">Student user</font><br /><font point-size="19">[Person]</font>>, style=filled, color="#052e56", fillcolor="#08427b", fontcolor="#ffffff"]
  10 [id=10,shape=rect, label=<<font point-size="34">WAYF login</font><br /><font point-size="19">[Software System]</font><br /><br /><font point-size="24">Existing Login provider</font>>, style=filled, color="#6b6b6b", fillcolor="#999999", fontcolor="#ffffff"]

  subgraph cluster_3 {
    margin=25
    label=<<font point-size="24"><br />InPlenary</font><br /><font point-size="19">[Software System]</font>>
    labelloc=b
    color="#444444"
    fontcolor="#444444"
    fillcolor="#444444"

    4 [id=4,shape=rect, label=<<font point-size="34">InPlenary Author<br />module</font><br /><font point-size="19">[Container: HTML/CSS/JavaScript]</font><br /><br /><font point-size="24">Web-application</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    5 [id=5,shape=rect, label=<<font point-size="34">InPlenary Lecture<br />module</font><br /><font point-size="19">[Container: HTML/CSS/JavaScript]</font><br /><br /><font point-size="24">Web-application</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    6 [id=6,shape=rect, label=<<font point-size="34">InPlenary Review<br />module</font><br /><font point-size="19">[Container: HTML/CSS/JavaScript]</font><br /><br /><font point-size="24">Web-application</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    7 [id=7,shape=rect, label=<<font point-size="34">Backend service for<br />persiting lectures</font><br /><font point-size="19">[Container]</font><br /><br /><font point-size="24">PhP</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    8 [id=8,shape=rect, label=<<font point-size="34">Access Point<br />webserver</font><br /><font point-size="19">[Container]</font><br /><br /><font point-size="24">PhP</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    9 [id=9,shape=cylinder, label=<<font point-size="34">Lecture database</font><br /><font point-size="19">[Container: MySql]</font><br /><br /><font point-size="24">Lecture database</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
  }

  1 -> 4 [id=11, label=<<font point-size="24">Lecturer uploads slides<br />and add interactive<br />widgets</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  4 -> 7 [id=13, label=<<font point-size="24">Transforms PDF to PNG and<br />adds interactive widgets</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 9 [id=14, label=<<font point-size="24">Persist lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  1 -> 5 [id=15, label=<<font point-size="24">Lecturer starts lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=16, label=<<font point-size="24">Loads lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 8 [id=17, label=<<font point-size="24">Query AP for room id</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  8 -> 5 [id=18, label=<<font point-size="24">returns room id</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=19, label=<<font point-size="24">assigns room id to lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  2 -> 5 [id=20, label=<<font point-size="24">Login to system</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=22, label=<<font point-size="24">process login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 10 [id=23, label=<<font point-size="24">query login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  10 -> 7 [id=25, label=<<font point-size="24">Approves login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 5 [id=27, label=<<font point-size="24">Show home screen</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=28, label=<<font point-size="24">Fetch room lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  2 -> 6 [id=29, label=<<font point-size="24">Login to system</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  6 -> 7 [id=30, label=<<font point-size="24">process login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 6 [id=31, label=<<font point-size="24">Show lecture list</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  2 -> 6 [id=32, label=<<font point-size="24">Select past lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  6 -> 7 [id=33, label=<<font point-size="24">fetch lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 6 [id=34, label=<<font point-size="24">Replay lecture with<br />interation data</font>>, style="dashed", color="#707070", fontcolor="#707070"]
}


```

<!--
digraph {
  compound=true
  graph [fontname="Arial", rankdir=TB, ranksep=1.0, nodesep=1.0]
  node [fontname="Arial", shape=box, margin="0.4,0.3"]
  edge [fontname="Arial"]
  label=<<br /><font point-size="34">InPlenary - Containers</font>>

  1 [id=1,shape=rect, label=<<font point-size="34">Lecturer user</font><br /><font point-size="19">[Person]</font>>, style=filled, color="#052e56", fillcolor="#08427b", fontcolor="#ffffff"]
  2 [id=2,shape=rect, label=<<font point-size="34">Student user</font><br /><font point-size="19">[Person]</font>>, style=filled, color="#052e56", fillcolor="#08427b", fontcolor="#ffffff"]
  10 [id=10,shape=rect, label=<<font point-size="34">WAYF login</font><br /><font point-size="19">[Software System]</font><br /><br /><font point-size="24">Existing Login provider</font>>, style=filled, color="#6b6b6b", fillcolor="#999999", fontcolor="#ffffff"]

  subgraph cluster_3 {
    margin=25
    label=<<font point-size="24"><br />InPlenary</font><br /><font point-size="19">[Software System]</font>>
    labelloc=b
    color="#444444"
    fontcolor="#444444"
    fillcolor="#444444"

    4 [id=4,shape=rect, label=<<font point-size="34">InPlenary Author<br />module</font><br /><font point-size="19">[Container: HTML/CSS/JavaScript]</font><br /><br /><font point-size="24">Web-application</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    5 [id=5,shape=rect, label=<<font point-size="34">InPlenary Lecture<br />module</font><br /><font point-size="19">[Container: HTML/CSS/JavaScript]</font><br /><br /><font point-size="24">Web-application</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    6 [id=6,shape=rect, label=<<font point-size="34">InPlenary Review<br />module</font><br /><font point-size="19">[Container: HTML/CSS/JavaScript]</font><br /><br /><font point-size="24">Web-application</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    7 [id=7,shape=rect, label=<<font point-size="34">Backend service for<br />persiting lectures</font><br /><font point-size="19">[Container]</font><br /><br /><font point-size="24">PhP</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    8 [id=8,shape=rect, label=<<font point-size="34">Access Point<br />webserver</font><br /><font point-size="19">[Container]</font><br /><br /><font point-size="24">PhP</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
    9 [id=9,shape=cylinder, label=<<font point-size="34">Lecture database</font><br /><font point-size="19">[Container: MySql]</font><br /><br /><font point-size="24">Lecture database</font>>, style=filled, color="#0b4884", fillcolor="#1168bd", fontcolor="#ffffff"]
  }

  1 -> 4 [id=11, label=<<font point-size="24">Lecturer uploads slides<br />and add interactive<br />widgets</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  4 -> 7 [id=13, label=<<font point-size="24">Transforms PDF to PNG and<br />adds interactive widgets</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 9 [id=14, label=<<font point-size="24">Persist lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  1 -> 5 [id=15, label=<<font point-size="24">Lecturer starts lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=16, label=<<font point-size="24">Loads lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 8 [id=17, label=<<font point-size="24">Query AP for room id</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  8 -> 5 [id=18, label=<<font point-size="24">returns room id</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=19, label=<<font point-size="24">assigns room id to lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  2 -> 5 [id=20, label=<<font point-size="24">Login to system</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=22, label=<<font point-size="24">process login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 10 [id=23, label=<<font point-size="24">query login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  10 -> 7 [id=25, label=<<font point-size="24">Approves login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 5 [id=27, label=<<font point-size="24">Show home screen</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  5 -> 7 [id=28, label=<<font point-size="24">Fetch room lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  2 -> 6 [id=29, label=<<font point-size="24">Login to system</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  6 -> 7 [id=30, label=<<font point-size="24">process login</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 6 [id=31, label=<<font point-size="24">Show lecture list</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  2 -> 6 [id=32, label=<<font point-size="24">Select past lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  6 -> 7 [id=33, label=<<font point-size="24">fetch lecture</font>>, style="dashed", color="#707070", fontcolor="#707070"]
  7 -> 6 [id=34, label=<<font point-size="24">Replay lecture with<br />interation data</font>>, style="dashed", color="#707070", fontcolor="#707070"]
}
-->

## Pilot and Evaluation
We piloted the system in two lectures to test the rebustness of the system. Following this we invited two lectureres from a different department to test the system in their lecture:

We collected use data and surveyed and interviewed the participating students about their experience with the system. For multiple reasons the system and research was only reported in my PhD thesis. It is used as a case in @beaudouin2021generative paper on _"Generative Theories of Interaction"_

I have wanted to return to this project and the system multiple times to do a more elaborate writeup, but I have not have the time. 