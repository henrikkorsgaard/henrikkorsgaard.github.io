---
title: "Garmin Public Transport Notification App I"
code-fold: true
code-summary: "Show the code"
---

I want to be better at using public transport. One of the main hurdles is that I do not take the bus or train frequently enough to remember the bus and train schedule. In my commute, I have a few combinations of options and connections depending on the time of day. On top of that, the schedule tend to change frequent enough for me to lose a sense of when the bus or train runs in relation to the next connection etc.

I figured that I could build a small app to help me leave my office or home in time to catch the _right_ connection at the _right_ time. 

I have a few high-level design requirements:

- **Personalizable:** I need to be able to filter line info and timeslots
- **Situated:** The application need to consider contextual parameters such as week, time of day, location and maybe even factor in delays?
- **Fast interaction:** Given it's about transit and quick decision, interacting with the app should be fast and simple. 

## A couple of scenarios to get us started

Lets start of with some scenearios. That will allow us to identify design features, platform and other early decisions. I will start with a scenario that describes the current situation (a so-called _problem scenario_~\cite{rossen})

_Henrik (that's me) is a 40-some white male who work as a researcher at a Computer Science department in the city. He lives in suberbia outside the city with his family. Every morning, Henrik get up around 6, do a short run for about 20 minutes, and then shower and eats. He helps his family get ready and some days he walks the dog. He usually leave for work between 8 and 9 in the morning (except when he is teaching early) and leaves for home around 16. He wants to commute more often, as a flexible option and to lower his CO2 footprint. However, planning the commute and experiences with frequent delays and lost connections make him chose the comforts of his car over public transport._ 

That gives us a bit of information on the context, the user and the challenge. Here are two future scenarios:

_Henrik is getting ready in the morning. His smartwatch notifies him that the bus for work is leaving in 15 minutes, so he has to walk in 5 minutes to catch it. He snoozes the notification. 4 minutes later the notification goes off again. Henrik decides that he is not ready yet, so he press next on the smart watch app. 10 minutes later, his smartwatch notifices him that the train is leaving in 15 minutes, so he has to walk in 5 minutes to catch it. He cancels the notification and pack the last things in his back. 5 minutes later he leaves for the train._

_Henrik is at work. He promised his familty that he would be home by 17. Around 16 his watch notifies him that a train is leaving in 20 minutes, so he has to walk in 5 minutes to catch it. He presses `options' and the watch shows that a bus is leaving in 30 minutes. He presses 'accept' on his smartwatch. 10 minutes later the smartwatch reminds him that he needs to walk within 5 minutes to catch the bus. On the way to the bus, the watch notifies him that the bus is 5 minutes delayed._ 

Whoa, that's a lot of information. Let's break it down a bit.

- The application is running on a smartwatch.

- The application 'knows' something about the bus departures relative to the location of the user and the destination.

- The application 'knows' something about the walking distance and time relative to the location fo the user and the location of the stop.

- The application need to support a couple of simple interactions: _snooze_, _next_, _accept_ and _options_.

- The application 'knows' something about the delay of the bus in real time.

These are mixes of high level design features (it needs to be a smartwatch application), requirements (integrate location, transit data etc.) and specific interaction design features (_snooze_ notification).
