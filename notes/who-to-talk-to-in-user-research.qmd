---
    title: "\"Who should I talk to?\": Picking the right informants in user research"
    subtitle: "Moving from outsider to (partial) insider and learning from the lead users"
---

A common challenge in software development is to identify and prioritize features in a feature system. Sometimes there are requriements to begin with, but they are often defined as high level specifications, and often technical in nature. The importnant details of the functions and features as they are presented to and used by future users is typically vaguely defined and negotiable. In this specification they are also underinformed in terms of what the future users _need_ and _want_.

Identifying requirements or specification or _what users need to do their work succesfully_, or just what would improve existing user experiences is a very hard challenge within software engineering, human-computer interaction, and in practically any project developing software; it is also a very deep challenge because of fundamental issues with problem framing and the nature of problems. Some problems _can_ be well-defined (given sufficient work, knowledge and information), but people may be reluctant to do so because it requires effort^[Suchman has a nice essay on this called "Located accountabilities in technology production"(https://aisel.aisnet.org/cgi/viewcontent.cgi?article=1082&context=sjis)], whereas others are hard to define or resist a single definitions^[This is a large topic with a lot of interesting readings. I would start with Rittel and Webber's ["Dilemmas in a General Theory of Planning"](https://www.sympoetic.net/Managing_Complexity/complexity_files/1973%20Rittel%20and%20Webber%20Wicked%20Problems.pdf), then Karl Popper's ["Of Clouds and Clocks"](http://www.the-rathouse.com/2011/Clouds-and-Clocks.html) and Herbert Simon's ["The Structure of Ill Structured Problems](https://cschan.arch.iastate.edu/235/6_Simon_Ill_defined_problem.pdf), and finally Sch√∂n's chapter 2 on ["From Technical Rationality to Reflection-in-Action"](https://www.ics.uci.edu/~redmiles/ics203b-SQ05/papers/Schoen1983-chapter2.pdf)]. Agile and iterative design approaches is very much a response to this challenge. We cannot specify the system to its fullest up front, so we need to be responsive and make changes as we know more. Even Royce recognize this in his original paper on [the waterfall model](https://brightspace.au.dk/content/enforced/90169-LR19032/royce1970.pdf).

Regardless of the challenge, projects need to progress and systems need to be implemented and delivered. Someone need to drive the work of moving from loosly defined specification to getting the sufficient details to design and develop the _right features in the right order_. This is the sharp edge of the challenge -- we need to go get information, and the best way to do that is to go and ask people. This is the essence of user research^[and domain driven design, participatory design, ethnography, market research and whatever you would call identifying a need and propose a viable solution].

## User Research: Who do we talk to then?
[Button and Sharrock (2021)](https://link.springer.com/book/10.1007/978-3-031-02186-2) propose a couple of maxims to guide doing user research. The first one is most relevant here: **Keep Close to the Work**: ``The first rule of doing ethnographic work in workplaces is to actually be with the people who are doing the work''. This means that if you have to build software for tracking and managing component quality in a manufacturing company, then you go a talk to the people at the manufacturing companty. If you are tasked with developing a system for archiving and handling documents within a public organisation doing case-work, the you go and talk to the case workers. If you are making scheduling applications for kindergardens or hospitals or a NGO organizing voluneer work you go and visit kindergardens, hospitals and NGO's and talk to the people there (not all at once, that would overload you and the project with potentially diverging information). 

That's will bring you half way there. If you just go and spend time within the domain and talk to people, you willl learn so much more than you bargined for and have enough to challenge ingrained assumptions that could potentially sabotage the project. The next questions is, who do you talk to then? Here, I would like to introduce two analytical (theoretical) perspectives that might guide you. They can be applied individually or in combination. 

## Become an insider and learning from the regulars
As software developers or user researchers we are often outsiders and the people we want to learn from are insiders. Edward Relph has written about the outsider-insider challenge from a place perspective in ["Place and Placelessnes"](https://uk.sagepub.com/en-gb/eur/place-and-placelessness/book249276)^[I'm sure there is a long and rich discussion and multiple theoretical perspectives on outsider- and insiderness in ethnography and antropology. I like Relph because he present both perspectices, a way to move from outsider to insider, and do so in relatively few pages.]. Here the outsiders are people unfamiliar with a particular place and insiders are people familiar with a place. Familiarity is equally fluent -- you can be familiar with a place you have not visited through reading, media, and/or by visiting similar places. This suggest considering user research as engaing with a place where the activities of interest happen. 

**First advice**: Go there -- you have to experience the place to understand and contextualise useful features.

Relph discuss how our familiarity of a place is a matter of insiderness, and consequently, our lack of understanding a matter of being outside. As a software developer or designer, we are very much outsideres to the particularities of a domain, practice, use and users etc.^[Sure, if you do software for hospitals for a decade or two, you and your organisation build up a familiarity with the domain. But when you go to a new hospital with the goal of developing a new system to a particular group of clinicians, you are still an outsider.]. 


Relph make a continuum of outsiderness to insiderness that is relevant for us. From this we can identify where we are (likely outsiders) and whom we should talk to to gain knowledge from an insider:

- **Existential outsider**
- **Objective outsider**
- **Incidential outsider**
- **Vicarious insider**
- **Behavioural insider**
- **Empathic insider**
- **Exsistential insider**

The first and last -- existential outsider/insider -- are not crucial for us. They merely point out that there is some knowledge and experiences that are so deep and existential that only those who experience it can experience it. *You* have experiences that nobody else can truely connect with, comprehend and experince. And people have experiences that *you* will never be able to comprehend or experience. On a more simple level, we typically cannot connect fully with the experiences of people within other groups and demographies (gender, ethnicity, culture, religion, sexual orientation). At best, we can recognise that people experience the world different and acknowledge their experiences with sympathy and empath.

Objective and incidental outsiders are two types of outsiderness where we do not understand the simple aspects of a practice, place, user experience etc. If we visit a company that produce products or service that we have had very knowledge of or interaciton with, or maybe are even surprised exist. Very few of us know the details of the procedures of the legal system, a heart transplant or what happens to our trash once we throw it in the bin. Objective outsiderness is when we do not care -- it's just another job and surely a scheduling system for a kindergarden should not diverge that much from a scheduling system for a hospital. Incidental outsiderness is when we make the same assumptions unconciossnessly. 

**Second advice**: Don't be an objective outsider -- embrace that we all are incidental outsiders in many situations. 

**Third advice**: Avoid talking to outsiders to the important practicies and activities -- this might include parts of management and other stakeholders in the project.

Vicarious insiders is a sort of middle groud between being and outsider and being and insider. On the one hand, vicarious insiders are curious outsiders who actively seek information about a particular domain or practice thourgh written accounts, documents, media and other sources of information. On the other hand, vicarious insiders try to get the knowledge they need through second-hand accounts, which only present partial information that is often outdated or does not reflect what happens in a _particular practice_. Relph compare it to reading travel books instead of traveling. My bet is that a lot of software projects are plagued with vicarious insiders that know enough to navigate a domain, but always fail to get it _just right_ because they only rely superficial sources of information.

Now we are getting to the folks that you should engage with to understand the work. The behavioural and empathic insiders. Both are people who know the domain, local practices, activities, people and procedures. A behavioural insider, implied, knows how to behave and participate in the activites, but might lack deep relations and understanding. They know _what to do_, but not the local variations and history. We all know how to conduct ourselves and successfully navigate a libary, but we might not know the local rules our who to talk to about a special subject in a particular libray we have not been at before. The empathic insiders would have this kind of knowledge. We all experience being behavioural insiders when we switch education or job. We know how to conduct and perform, but it take some time for us to get the sufficiant understanding of the local practices that empathic and existential insiders have. More importantly, from our perspective as outsiders (or vicarious insiders), everyone in a domain are behavioural insiders. As outsiders it is hard to identify empathic insiders.

**Fourth advice**: Talk to the behavioural insiders, but make it a priority to identify empathic insiders

## Finding and learning from the lead users
Identifying and learning from the emphatic insiders is often discussed as _identifying and learning from lead users_ in design research and innovation studies. I use the emphatic insiders simply because I like the framing better -- it is telling about what they know and their relation to a practice. Lead user is forever tied to a product or technology, and marketing. So from now on think lead users as emphatic insiders with a product focus. The challenge is the same -- if we want to learn from the lead users, we need to identify these. Witin commercial products one strategy is to data mine user data and social media, but for most software development dealing with a new system or a new domain or a new context, this is neither viable or a good strategy^[Sure, if you develop public services in Denmark like nemID, AULA, eboks etc. you should go check out what people say about the usability of your product on social media].

_How do we identify emphatic insiders or lead users in a client organisation, domain or pracitce?_

Within organisations and social groups -- we call them [collectives in a recent publication](https://pure.itu.dk/ws/files/90412654/CollectiveArtifactEcologies.pdf) -- there are people who are more familiar with the work, its history, the technologies, procedures, and the roles and politics of the organisation. They are the **emphatic insiders** in Relph's terminology, **lead users** in innovation studies and more **capable peers** in activity theory. We all know examples and approach them to navigate our own organisations and get the information we need to do our work. They are the people that, often dispite their role, are capable of answering questions about the informal structure and nature of tasks and activites; They are the people other people refer to when we ask questions: "You need to talk to Pete -- he's been here for a long time and was part of the restructuring of that part back in 2010." For software engineering, they are the folks that know and can remember obscure details about an old project and codebase because they were part of the initial whiteboard sessions and commits. **You already know who they are for your organisation** -- we need to identify these people in the organisations and practices we develop software for.

[Petrovsky](https://www.tandfonline.com/doi/abs/10.2753/RSS1061-1428240261), a social psycologist, talk about this behaviour as _referentiality_. The collective (group) establish a shared informal reference of someone within the group who is more knowledgable about the activities and everything that entails. Sometimes this individual is recongnized through an official role or position within the organisation as a  leader, mentor, coach or something else, however, that is not given. This more-capable or knowledgable peer might be hiding somewhere in the organisation because of the informal and social nature of knowledge. They may not be a node in the official organisational diagram, but they will be important nodes in the social graph of an organisation. Our research (and experiences from other contexts) show that you do this through asking the members of an organisation, community or collective who they go to if they need information, if the system breaks down, when in doubt or when they need a second opinion. Surprisingly, 

**Fifth advice**: Ask people who they approach for advice and information within the organisation around the central task and/or systems -- these are the lead users, emphathic insiders and more capable peers.  

### A matter of distance and commitment
Up until now I have ignored some of the challenges in approaching lead users in user research with client organisations and when developing larger systems. There are several facets to this challenge -- some are in the client organisation, while others are on software engineering practices and how the development process is organised.

If the lead users "hides" in informal social relations and roles within the client organisation, and if the project manager in the client organisation think they are the lead user or have already lined behavioural insiders up as informants, it can be difficult to change the direction of and participants in the user research. This is something that is a challenge for research as well. I have gone through with interviews with participants that was volunteer by their manager, while they clearly and self-acknowledged that they were not the best source of information. When possible, we should try to engage with this issue with the client organisation, and if it fails, remember that **a little goes a long way** as Button and Sharrow say. Talking to the lead user is ideal, but we can learn _enough to get us started_ from behavioural and even viscarious insiders. Then when we hit an information void on a paricular issue, we can approach the client and illustrate the problem. Sometimes this can motivate more access. Proof of work and implications can often help commit resources. 

**Sixt advice**: Take the information you can get and use it to illustrate where and why you need more precise and updated information.

One of the biggest challenges is the overreliance on existing assumptions and outdated knowledge within software projects. Because a lot of activities have superficial resemblence and we as humans tend to jump to conclusions, it is so tempting to rely on superficial understandings and ingrained assumptions. This is dangerous in combination with project organisation that are operating at a distance, with the wrong participants from the client organisation and with too many layers of abstraction, communication and interfaces between the future users and the developers. 

**Seventh advice**: Assume you act on partial information and recognise when and where you are an outsider!

Suchman talk about accountability and distance in her essay on ["Located accountabilities in technology production"](https://aisel.aisnet.org/cgi/viewcontent.cgi?article=1082&context=sjis). She point out that software engineering often work across organisational and disciplinary boundaries (think client organisation and domain) and that introduces a distance that is maintained both by software engineering practices, clients limiting access to the users and organisational issues in how software development is organised. For software development, Suchman's point is that design is done from "nowhere" with "detached intimacy". That is, from Relph's perspective, maintaining an _objective outsiderness_. Instead, Suchman argues that the only way to overcome this is to engage with the collective knowledge of the particular locations of design (software engineering project) and use (client organisation and users). The collective knowledge as Suchman says, is what Even's talk about in establishing a shared language in Domain Driven Design and what Participatory Design call mutual learning. My addition would be the understanding that this learning process is what moves us from outsiders to partial insiders, and in that, that the relations with the client organisation and practitioners is of utmost importance. 

**Eight advice**: See any project you engage with as a learning process where you have to become an expert on the challenges, needs and experiences of the client organisation and whomever will end up using the software you are building



